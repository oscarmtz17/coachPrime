name: CI/CD Pipeline - QA Deployment

on:
  push:
    branches: [qa, master, develop]
  pull_request:
    branches: [master, qa]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "qa"
        type: choice
        options:
          - qa
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/oscarmtz17/coachprime
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-qa:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/qa' || github.event_name == 'workflow_dispatch'
    environment: qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to QA Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.QA_HOST }}
          username: ${{ secrets.QA_USERNAME }}
          key: ${{ secrets.QA_SSH_KEY }}
          port: ${{ secrets.QA_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/coachprime-qa

            # Pull latest image
            docker pull ghcr.io/oscarmtz17/coachprime:latest

            # Stop existing containers
            docker-compose -f docker-compose.qa.yml down

            # Update docker-compose.qa.yml with new image

            # Create .env file with AWS credentials
            cat > .env << EOF
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            EOF

            # Install Nginx and Certbot if not installed
            if ! command -v nginx &> /dev/null; then
                apt update && apt install -y nginx certbot python3-certbot-nginx
            fi

            # Create Nginx configuration
            cat > /etc/nginx/sites-available/qa.mytracksnote.com << 'NGINX_CONFIG'
server {
    listen 80;
    server_name qa.mytracksnote.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name qa.mytracksnote.com;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/qa.mytracksnote.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/qa.mytracksnote.com/privkey.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Frontend (React App)
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Backend API
    location /api/ {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://localhost:5000/api/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
NGINX_CONFIG

            # Enable the site
            ln -sf /etc/nginx/sites-available/qa.mytracksnote.com /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx

            # Get SSL certificate (only if domain is accessible)
            if nslookup qa.mytracksnote.com &> /dev/null; then
                certbot --nginx -d qa.mytracksnote.com --email admin@mytracksnote.com --agree-tos --non-interactive || echo "SSL certificate setup failed, continuing..."
            fi

            # Start containers
            docker-compose -f docker-compose.qa.yml up -d

            # Wait for health check
            sleep 30

            # Check if containers are running
            docker-compose -f docker-compose.qa.yml ps

            # Optional: Run database migrations
            # docker-compose -f docker-compose.qa.yml exec webapi dotnet ef database update

      - name: Health Check
        run: |
          # Wait a bit more for the application to fully start
          sleep 60

          # Check if the API is responding
          curl -f http://${{ secrets.QA_HOST }}:5000/api/health || exit 1

  notify:
    needs: [deploy-qa]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on Success
        if: needs.deploy-qa.result == 'success'
        run: |
          echo "✅ QA deployment successful!"
          echo "Environment: QA"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Deployed at: $(date)"

      - name: Notify on Failure
        if: needs.deploy-qa.result == 'failure'
        run: |
          echo "❌ QA deployment failed!"
          echo "Check the logs for more details"
