// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(CoachPrimeContext))]
    [Migration("20241019214333_DietasModel")]
    partial class DietasModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agrupacion", b =>
                {
                    b.Property<int>("AgrupacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgrupacionId"));

                    b.Property<int>("DiaEntrenamientoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgrupacionId");

                    b.HasIndex("DiaEntrenamientoId");

                    b.ToTable("Agrupaciones");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("DiaEntrenamiento", b =>
                {
                    b.Property<int>("DiaEntrenamientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiaEntrenamientoId"));

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RutinaId")
                        .HasColumnType("int");

                    b.HasKey("DiaEntrenamientoId");

                    b.HasIndex("RutinaId");

                    b.ToTable("DiasEntrenamiento");
                });

            modelBuilder.Entity("Ejercicio", b =>
                {
                    b.Property<int>("EjercicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EjercicioId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Repeticiones")
                        .HasColumnType("int");

                    b.Property<int>("Series")
                        .HasColumnType("int");

                    b.HasKey("EjercicioId");

                    b.ToTable("Ejercicios");
                });

            modelBuilder.Entity("EjercicioAgrupado", b =>
                {
                    b.Property<int>("EjercicioAgrupadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EjercicioAgrupadoId"));

                    b.Property<int>("AgrupacionId")
                        .HasColumnType("int");

                    b.Property<int>("EjercicioId")
                        .HasColumnType("int");

                    b.HasKey("EjercicioAgrupadoId");

                    b.HasIndex("AgrupacionId");

                    b.HasIndex("EjercicioId");

                    b.ToTable("EjercicioAgrupado");
                });

            modelBuilder.Entity("Progreso", b =>
                {
                    b.Property<int>("ProgresoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgresoId"));

                    b.Property<double?>("BrazoCm")
                        .HasColumnType("float");

                    b.Property<double?>("CaderaCm")
                        .HasColumnType("float");

                    b.Property<double>("CaloriasDiarias")
                        .HasColumnType("float");

                    b.Property<double?>("CinturaCm")
                        .HasColumnType("float");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<double>("EstaturaCm")
                        .HasColumnType("float");

                    b.Property<double>("FactorActividad")
                        .HasColumnType("float");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<double>("IMC")
                        .HasColumnType("float");

                    b.Property<string>("NivelActividad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PechoCm")
                        .HasColumnType("float");

                    b.Property<double>("PesoKg")
                        .HasColumnType("float");

                    b.Property<double?>("PiernaCm")
                        .HasColumnType("float");

                    b.Property<double>("TMB")
                        .HasColumnType("float");

                    b.HasKey("ProgresoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Progresos");
                });

            modelBuilder.Entity("Rutina", b =>
                {
                    b.Property<int>("RutinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RutinaId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RutinaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Rutinas");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Agrupacion", b =>
                {
                    b.HasOne("DiaEntrenamiento", "DiaEntrenamiento")
                        .WithMany("Agrupaciones")
                        .HasForeignKey("DiaEntrenamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaEntrenamiento");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.HasOne("Usuario", "Usuario")
                        .WithMany("Clientes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DiaEntrenamiento", b =>
                {
                    b.HasOne("Rutina", "Rutina")
                        .WithMany("DiasEntrenamiento")
                        .HasForeignKey("RutinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rutina");
                });

            modelBuilder.Entity("EjercicioAgrupado", b =>
                {
                    b.HasOne("Agrupacion", "Agrupacion")
                        .WithMany("EjerciciosAgrupados")
                        .HasForeignKey("AgrupacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ejercicio", "Ejercicio")
                        .WithMany()
                        .HasForeignKey("EjercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agrupacion");

                    b.Navigation("Ejercicio");
                });

            modelBuilder.Entity("Progreso", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Progresos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Rutina", b =>
                {
                    b.HasOne("Cliente", "Cliente")
                        .WithMany("Rutinas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agrupacion", b =>
                {
                    b.Navigation("EjerciciosAgrupados");
                });

            modelBuilder.Entity("Cliente", b =>
                {
                    b.Navigation("Progresos");

                    b.Navigation("Rutinas");
                });

            modelBuilder.Entity("DiaEntrenamiento", b =>
                {
                    b.Navigation("Agrupaciones");
                });

            modelBuilder.Entity("Rutina", b =>
                {
                    b.Navigation("DiasEntrenamiento");
                });

            modelBuilder.Entity("Usuario", b =>
                {
                    b.Navigation("Clientes");
                });
#pragma warning restore 612, 618
        }
    }
}
